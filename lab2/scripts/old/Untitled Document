#!/usr/bin/env python

# Every python controller needs this line
import rospy

# The velocity command message
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from sys import argv

dist = 0 
stopT = 0.1 #set the stop threshold 
speed = 0.5 #normal speed
length = 0.24 #length 
accuracy = 0.01 

def callback(data):
    global dist
    global stopT 
    global accuracy
    global mul
    
    global speed

    command = Twist()
    command.linear.x = 0.0
    command.linear.y = 0.0
    command.linear.z = 0.0
    command.angular.x = 0.0
    command.angular.y = 0.0
    command.angular.z = 0.0    
    dist = min(data.ranges)
    
    if(dist < (stopT + length) +speed):
	
	mul = ((dist - (stopT + length)) / speed)
	command.angular.z = 1 
	if(abs(mul) < accuracy):
	    mul = 0
	else:
	    mul = 1
	    command.angular.z = 0.0
	command.linear.x = speed * mul
	print('dist: ' + str(dist-length) + '     ' + 'speed: ' + str(command.linear.x) )

     
class Runner:
    def _init_(self, stopDist = 0.5 max_speed = 0.2)
	self.stopDist = stopDist
	self.max_speed = max_speed
	
	self.pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=10)
 	self.pub = rospy.Subscriber('/scan', LaserScan, callback,queue_size= 100)
 	
    def callback(self, msg):
	command = Twist()
        command.linear.x = 0.0
        command.linear.y = 0.0
        command.linear.z = 0.0
        command.angular.x = 0.0
        command.angular.y = 0.0
        command.angular.z = 0.0

	error = min(msg.ranges) - self.distance
        command.linear.x = self.max_speed * tanh(10.0 * error)

        # Publish the twist message to move the robot
        self.pub.publish(command)

if __name__ == '__main__':
    global command   
    mul = 0.0
	
    #speed = input()
   

    #filename = raw_input('Enter a filename ')+'.txt'
    rospy.init_node('move')
    pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=10)
 

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
	

	pub.publish(command)
	rate.sleep()
    
   
